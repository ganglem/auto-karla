#!/bin/sh

# The reference version of this script is maintained in:
#   kali-installer/simple-cdd/profiles/kali.postinst
#   kali-live/kali-config/common/includes.installer/kali-finish-install
#   kali-live/kali-config/common/includes.chroot/usr/lib/live/config/0031-kali-user-setup
#   kali-vm/scripts/finish-install.sh
# (sometimes with small variations)
#
# It is used in multiple places to finish configuring the target system
# and build.sh copies it where required (in the simple-cdd configuration
# and in the live-build configuration).

configure_sources_list() {
    if grep -q '^deb ' /etc/apt/sources.list; then
        echo "INFO: sources.list is configured, everything is fine"
        return
    fi

    echo "INFO: sources.list is empty, setting up a default one for Kali"

    cat >/etc/apt/sources.list <<END
# See https://www.kali.org/docs/general-use/kali-linux-sources-list-repositories/
deb http://http.kali.org/kali kali-rolling main contrib non-free non-free-firmware

# Additional line for source packages
# deb-src http://http.kali.org/kali kali-rolling main contrib non-free non-free-firmware
END
    apt-get update
}

create_karla_user() {
    if getent passwd karla >/dev/null; then
        echo "INFO: user 'karla' already exists"
        return
    fi

    echo "INFO: creating default user 'karla'"

    # TODO: Replace this password hash with your custom hash
    # This is a placeholder hash for password "kali" - CHANGE THIS!
    PASSWORD_HASH='$6$9n9rl0r.Kyh3gBM6$QG/MJ687.VkUcXb2SyU1Ly..URuUxoAV8x34AffCpZJNY6qjSKRbfrOtkCWrLyDSgozfpWYnGu5rmXivKKIed0'

    useradd -m -s /bin/bash -c "Karla" karla
    echo "karla:$PASSWORD_HASH" | chpasswd -e

    # Add karla to sudo group for administrative privileges
    usermod -a -G sudo karla
    echo "INFO: user 'karla' added to sudo group"

    echo "INFO: user 'karla' created successfully"
}

create_pentest_folder() {
    if [ ! -d /home/karla ]; then
        echo "WARNING: /home/karla does not exist, skipping PENTEST folder creation"
        return
    fi

    echo "INFO: creating PENTEST folder in karla's home directory"
    mkdir -p /home/karla/PENTEST

    chown -R karla:karla /home/karla/PENTEST
    chmod -R 755 /home/karla/PENTEST

    echo "INFO: PENTEST folder created successfully"
}

setup_pentest_folder() {
    if [ ! -d /home/karla/PENTEST ]; then
        echo "WARNING: /home/karla/PENTEST does not exist, skipping file setup"
        return
    fi

    echo "INFO: setting up PENTEST folder with files"

    # Get the directory where this script is located
    SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
    echo "INFO: script is running from: $SCRIPT_DIR"

    # List contents for debugging
    echo "INFO: contents of script directory:"
    ls -la "$SCRIPT_DIR"

    # Copy JAR files from the same directory as this script
    JAR_COUNT=0
    for jarfile in "$SCRIPT_DIR"/*.jar; do
        if [ -f "$jarfile" ]; then
            echo "INFO: copying $(basename "$jarfile") to PENTEST folder"
            cp -v "$jarfile" /home/karla/PENTEST/
            JAR_COUNT=$((JAR_COUNT + 1))
        fi
    done

    if [ $JAR_COUNT -gt 0 ]; then
        echo "INFO: successfully copied $JAR_COUNT JAR file(s)"
        chown -R karla:karla /home/karla/PENTEST
        chmod 644 /home/karla/PENTEST/*.jar 2>/dev/null || true
    else
        echo "WARNING: no JAR files found in $SCRIPT_DIR"

        # Fallback: try the typical CD mount locations
        for CDROM_PATH in "/cdrom" "/media/cdrom" "/media/cdrom0" "/run/live/medium"; do
            KARLA_FILES="$CDROM_PATH/simple-cdd"
            if [ -d "$KARLA_FILES" ]; then
                echo "INFO: trying fallback location at $KARLA_FILES"
                for jarfile in "$KARLA_FILES"/*.jar; do
                    if [ -f "$jarfile" ]; then
                        echo "INFO: copying $(basename "$jarfile") from fallback location"
                        cp -v "$jarfile" /home/karla/PENTEST/
                        JAR_COUNT=$((JAR_COUNT + 1))
                    fi
                done
                [ $JAR_COUNT -gt 0 ] && break
            fi
        done

        if [ $JAR_COUNT -gt 0 ]; then
            echo "INFO: successfully copied $JAR_COUNT JAR file(s) from fallback location"
            chown -R karla:karla /home/karla/PENTEST
            chmod 644 /home/karla/PENTEST/*.jar 2>/dev/null || true
        else
            echo "WARNING: Could not find JAR files in any location"
        fi
    fi

    echo "INFO: PENTEST folder setup complete"
}

get_user_list() {
    for user in $(cd /home && ls); do
        if ! getent passwd "$user" >/dev/null; then
            echo "WARNING: user '$user' is invalid but /home/$user exists" >&2
            continue
        fi
        echo "$user"
    done
    echo "root"
}

configure_zsh() {
    if grep -q 'nozsh' /proc/cmdline; then
        echo "INFO: user opted out of zsh by default"
        return
    fi
    if [ ! -x /usr/bin/zsh ]; then
        echo "INFO: /usr/bin/zsh is not available"
        return
    fi
    for user in $(get_user_list); do
        echo "INFO: changing default shell of user '$user' to zsh"
        chsh --shell /usr/bin/zsh $user
    done
}

configure_usergroups() {
    # Ensure those groups exist
    addgroup --system kaboxer || true
    addgroup --system wireshark || true

    # adm - read access to log files
    # dialout - for serial access
    # kaboxer - for kaboxer
    # vboxsf - shared folders for virtualbox guest
    # wireshark - capture sessions in wireshark
    kali_groups="adm dialout kaboxer vboxsf wireshark"

    for user in $(get_user_list | grep -xv root); do
        echo "INFO: adding user '$user' to groups '$kali_groups'"
        for grp in $kali_groups; do
            getent group $grp >/dev/null || continue
            usermod -a -G $grp $user
        done
    done
}

pkg_installed() {
    dpkg -s "$1" 2>/dev/null | grep -q "ok installed"
}

configure_terminal() {
    while read -r desktop terminal; do
        pkg_installed kali-desktop-$desktop || continue
        echo "INFO: setting x-terminal-emulator alternative to '$terminal'"
        update-alternatives --verbose --set x-terminal-emulator /usr/bin/$terminal || true
        break
    done <<END
e17   terminology
gnome gnome-terminal.wrapper
i3    kitty
kde   konsole
lxde  lxterminal
mate  mate-terminal.wrapper
xfce  qterminal
END
}

echo "========================================"
echo "Kali-Karla postinst script started at $(date)"
echo "========================================"

create_karla_user
create_pentest_folder
setup_pentest_folder
configure_sources_list
configure_zsh
configure_usergroups
configure_terminal

echo "========================================"
echo "Kali-Karla postinst script completed at $(date)"
echo "========================================"
